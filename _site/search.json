[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. Using appropriate functions of spatstat, we can discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer in this exercise are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#assigning-the-correct-epsg-code",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#assigning-the-correct-epsg-code",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "Assigning the correct EPSG code",
    "text": "Assigning the correct EPSG code\nNow, we need to check mpsz_sf to ensure that it is using the correct EPSG code.\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAs can be seen, despite being projected in SVY21, the EPSG code is incorrect. We can fix this using st_transform.\n\nmpsz3414_sf <- st_transform(mpsz_sf, 3414)\n\nNow we can check the CRS again. This time, it should be shown as 3414.\n\nst_crs(mpsz3414_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#diy-creating-coastaloutline",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#diy-creating-coastaloutline",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "DIY: Creating CoastalOutline",
    "text": "DIY: Creating CoastalOutline\nWe need to derive the CoastalOutline from mpsz_3414. Using examples found in the documents of sf, I have come up with the following steps:\nFirst, we need to check the type of data we have.\n\nst_geometry(mpsz3414_sf)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nFrom the above, we can see that mpsz3414_sf is a geometry set. In order to use get a clean coastal outline for Singapore, we will need to convert these into simple geometric features using st_as_sf. This is because otherwise, when we use st_union, the subzone boundaries will still be present as shown below.\n\nCoastalOutline1 <- st_combine(mpsz3414_sf)\nplot(st_union(CoastalOutline1))\n\n\n\n\nInstead, we should first use st_as_sf to transform the data into a simple feature collection.\n\nCoastalOutline <- st_as_sf(mpsz3414_sf)\nCoastalOutline\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nNow, we should be able to use st_union in conjunction with plot to see a Singapore as just the Coastal Outlines!\n\nplot(st_union(CoastalOutline))\n\n\n\n\n\n\n\n\n\n\nMain lessons from CoastalOutline\n\n\n\n\nmpsz3414_sf does not have a simple features geometry column (from an error message while attempting to use st_read(system.file()), which prevents reading the shp file directly\nTo transform a geometry set into a simple feature set, we use st_as_sf\nst_union is using while plotting to reveal the CoastalOutline"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#checking-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#checking-the-data",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "Checking the data",
    "text": "Checking the data\nIt is important that we ensure that the data is accurate. To do that here, since all of our data is geospatial in nature, we can simply plot a map.\n\n\n\n\n\n\nTip\n\n\n\nBecause childcare_sf is a collection of point data, we use tm_dots instead of tm_polygons.\n\n\n\ntm_shape(CoastalOutline) + \n  tm_polygons() + \n  tm_shape(mpsz3414_sf) + \n  tm_polygons() + \n  tm_shape(childcare_sf) + \n  tm_dots()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "Converting sf data frames to sp’s Spatial* class",
    "text": "Converting sf data frames to sp’s Spatial* class\nThere are many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. Hence, we will use as_Spatial to convert the three geospatial data from a simple feature dataframe to sp’s Spatial* class.\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz3414_sf)\nsg <- as_Spatial(CoastalOutline)\n\nBelow, we can see what the data looks like now\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>100044</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>349C54F201805938</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093837</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                                            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>99982</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>35, ALLANBROOKE ROAD, SINGAPORE 099982</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>ISLANDER PRE-SCHOOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>4F63ACF93EFABE7F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093837</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\nNote how the class has changed entirely to SpatialPolygonsDataFrame"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "There was no in-class exercise for week 1."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "These are notes and exercises for week 2."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#packages-used",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#packages-used",
    "title": "In-class Exercise 2",
    "section": "Packages used",
    "text": "Packages used\nThe following R packages will be used in this class:\n\narrow: allows for handling of databases and data conversion. For this exercise specifically, it allows us to read Parquet files\nlubridate: part of tidyverse, but a later part so it requires a separate download, allows for working with dates and times\ntidyverse\ntmap\nsf\n\n\npacman::p_load(arrow, lubridate, tidyverse, tmap, sf)\n\n\n\n\n\n\n\nNew formatting trick\n\n\n\nTook a peek at prof’s code during the class, found out and tried using call out notes"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-data-for-exercise",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-data-for-exercise",
    "title": "In-class Exercise 2",
    "section": "Importing data for exercise",
    "text": "Importing data for exercise\nFor this exercise, we are using some Grab data that Prof Kam has provided for us.\nBecause the data is a PARAQUET file type, we will be using read_paraquet from the arrow package. This will be saved as df.\n\ndf <- read_parquet(\"data/GrabPosisi/part-00000.parquet\")\n\n\n\nCode\ndf\n\n\nfunction (x, df1, df2, ncp, log = FALSE) \n{\n    if (missing(ncp)) \n        .Call(C_df, x, df1, df2, log)\n    else .Call(C_dnf, x, df1, df2, ncp, log)\n}\n<bytecode: 0x000002d91e95a8c0>\n<environment: namespace:stats>\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor ease of calling, we can rename the file to something easier to use\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is possible to go back to the root instead for the data, but this is messy\n\n\n\n\nCode\ndf1 <- read_parquet(\"../../data/GrabPosisi/part-00000.parquet\")\n\n\n\n\nConverting the data type of pingtimestamp to date-time\n\ndf$pingtimestamp <- as_datetime(df$pingtimestamp)\n\n\n\n\n\n\n\nTip\n\n\n\nBy using the $, it allows us to call and overwrite the df directly\n\n\nNow to save the reformatted df into a new rds file.\n\nwrite_rds(df, \"data/rds/part0.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-starting-locations",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-starting-locations",
    "title": "In-class Exercise 2",
    "section": "Extracting trip starting locations",
    "text": "Extracting trip starting locations\nNow, we extract the trips origin locations, derive 3 new columns for weekday, starting hour and day of month and name the output tibble data.frame origin_df\n\norigin_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nwday, hour and mday are from lubridate package, whilearrange is from dplyr"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-ending-locations",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-ending-locations",
    "title": "In-class Exercise 2",
    "section": "Extracting trip ending locations",
    "text": "Extracting trip ending locations\nNow, we are extracting the destination locations.\n\ndest_df <- df %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==n()) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n\n\n\n\n\nImportant\n\n\n\nAn alternate way to arrange is arrange(desc(pingtimestamp)) %>% filter(row_number() == 1)\n\n\nRemember to write it out as rds to save space.\n\nwrite_rds(origin_df, \"data/rds/origin_df.rds\")\nwrite_rds(dest_df, \"data/rds/dest_df.rds\")\n\nrds will save all object classes as native, which means that it will save all the special labels and abbreviations as well. This allows us to directly use the data without having to reformat it again."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#import-data-but-this-time-as-rds",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#import-data-but-this-time-as-rds",
    "title": "In-class Exercise 2",
    "section": "Import data, but this time as rds",
    "text": "Import data, but this time as rds\n\norigin_df <- read_rds(\"data/rds/origin_df.rds\")\ndest_df <- read_rds(\"data/rds/dest_df.rds\")\n\n\n\n\n\n\n\nImportant\n\n\n\nAfter everything above has been run and saved, you can use #| eval:false to prevent the code chunk from running"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#diy-to-be-done-at-home",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#diy-to-be-done-at-home",
    "title": "In-class Exercise 2",
    "section": "DIY: to be done at home",
    "text": "DIY: to be done at home\nImport the 2019 master plan planning subzone and map the start and end locations onto the map.\nAll of the dots should be within the boundaries of the Singapore map"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-to-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-spatial-class-to-generic-sp-format",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "Converting the Spatial* class to generic sp format",
    "text": "Converting the Spatial* class to generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThis code chunk converts the Spatial* class into generic sp objects.\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\n\n\n\n\nNote\n\n\n\nIt appears that the main difference that can be observed is that a sp object does not include a dataframe of data (such as name and other aspatial data). It is entirely made up of geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-on Exercise 3: Spatial Point Patterns Analysis Methods",
    "section": "Converting the generic sp format into spatstat’s ppp format",
    "text": "Converting the generic sp format into spatstat’s ppp format\nNext, we use the as.ppp() function to convert the spatial data into spatstat’s ppp object. (Finally!)\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp"
  }
]