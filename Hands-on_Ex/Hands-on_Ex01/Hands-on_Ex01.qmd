---
title: "Hands-on Exercise 1: Geospatial Data Science with R"

execute:
  warning: false
  freeze: true
date: "`r Sys.Date()`"
---

<!-- r Sys.Date() gives the last updated time, while warning: false will hide any error messages -->

# Getting Started

## Installing and loading R packages

Install and load the required packages:

Install via Tools \> Install Packages... \> Type "pacman" into the "Packages" line

-   If needed, pacman

    -   Install via Tools \> Install Packages... \> Type "pacman" into the "Packages" line

-   tidyverse

-   sf

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing geospatial data

There are three layers of geospatial data that need to be imported into R using *st_read()* of the **sf package**:

1.  `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

2.  `CyclingPath`, a line feature layer in ESRI shapefile format, and

3.  `PreSchool`, a point feature layer in kml file format.

```{r}
mpsz = st_read(dsn = "data/Geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
cyclingpath = st_read(dsn = "data/Geospatial", 
                         layer = "CyclingPathGazette")
```

```{r}
preschool = st_read("data/Geospatial/PreSchoolsLocation.kml")
```

<!-- Note that for kml, the entire path and extension need to be provided, while for shp there is no need for this -->

## Checking the Content of A Simple Feature Data Frame

Retrieve information related to the content of a simple feature data frame using:

-   st_geometry()

-   glimpse()

-   head()

### Working with st_geometry()

A general way to retrieve and display basic information of feature classes such as type of geometry, the geographic extent of the features and the coordinate system of the data.

```{r}
st_geometry(mpsz)
```

### Working with glimpse()

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. *glimpse()* reveals the data type of each field.

```{r}
glimpse(mpsz)
```

### Working with head()

Sometimes we would like to reveal complete information of a feature object, this is the job of *head()*. We can also select the number of records that we would like to see using this function.

```{r}
head(mpsz, n=5)
```

## Plotting the Geospatial data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is where the function *plot()* comes in. Note that *plot()* is only used for a quick look.

```{=html}
<!--eval: false will hide output, while echo: false will hide the code chunk 
Remember to use #| for the above commented code -->
```
```{r}

plot(mpsz)
```

To plot only geometry:

```{r}
plot(st_geometry(mpsz))
```

To plot using a specific attribute:

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Working with Projection

### Assigning EPSG code

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of mpsz simple feature data frame by using *st_crs()* of sf package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be **3414**.

In order to assign the correct EPSG code to mpsz data frame, *st_set_crs()* of sf package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again.

```{r}
#| echo: false
st_crs(mpsz3414)
```

### Transforming the projection of preschool

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
#| echo: false
st_geometry(preschool)
st_crs(preschool)
```

This is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.

Use the following code snippet to perform the projection transformation.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

When checking the content of preschool dataframe, we can now see that it has been reprojected to SVY21

```{r}
#| echo: false
st_geometry(preschool3414)
```

## Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. **listings** from Airbnb is one such example.

### Importing aspatial data

Since **listings** data set is in csv file format, we will use *read_csv()* of readr package to import **listing.csv** as shown the code chunk below. The output R object is called listings and it is a tibble data frame.

```{r}
listings <- read_csv("data/Aspatial/listings.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.

```{r}
list(listings) 
```

The output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are **latitude** and **longitude**. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.

### Creating a simple feature data frame from an aspatial data frame

The code chunk below converts listing data frame into a simple feature data frame by using *st_as_sf()* of sf packages

```{r}
#| eval: false
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other countryâ€™s epsg code by referring to epsg.io.

-   %\>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.

Examining the content of this newly created simple feature data frame, a new column called `geometry` has been added into the data frame while the `longitude` and `latitude` columns have been dropped from the data frame.

## Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

### Buffering

**The scenario:**

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

**The solution:**

Firstly, st_buffer() is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

<!-- nQuadSegs determines how smooth the curve is by stating the number of points between two coordinate pairs -->

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

**Mission Accomplished!**

## Point-in-polygon count

**The scenario:**

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**The solution:**

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using *st_intersects()*. Next, *length()* of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

WARNING: DO NOT MIX UP WITH st_intersection()

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

### Density of pre-school by planning subzone

Firstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate ggplot2 functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school evenly distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

### Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

Personal try:

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`,
         x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
            fill="light blue") +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

Solution (cleaner):

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
